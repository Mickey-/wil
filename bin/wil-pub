#!/usr/bin/env node
'use strict';
const GC = require('../module/setGlobalConfig')
const path = require("path")
const fs = require("fs")
const program = require('commander')
const co = require("co")
const chalk = require("chalk")
//const cli = require("scp2")
const log = require("../module/log")
const pushTag = require("../module/pushTag")
const deployCDN = require("../module/deployCDN")
const checkDistProd = require("../module/checkDistProd")

program.alias('p')
  .usage('[path] [options]')
  .option('--tag <tagname>', '打一个tag并推送到远端')
  //.option('-p', '发布到生产环境真实CDN')
  .option('--media', '是否需要发布媒体目录下的文件,默认不发布（因为图片等媒体资源很少变化，有变化可以单独发布图片）')
  .description('部署发布目录(默认dist/)下文件到CDN。若指定path(默认./)，将只发布指定文件(夹)')
  .action((path) => {
    program.path = path
    log.info('已指定待发路径，将进行局部发布')
  })

  program.parse(process.argv)

const gen = function* () {
  log.info('解析项目根目录的可选配置文件.wilrc, 启动自动化部署...')
  // 发布目录的绝对地址
  const deployDirPath = path.resolve(GC.repoPath, GC.deployDir)
  const argPath = program.path
  // 发布路径, 区分是局部目录/文件 还是dist目录全量发布
  const deployPath = argPath ? path.resolve(argPath) : deployDirPath

  // 在用户自定义局部发布的情况下，检测用户指定的路径是否在发布目录下（默认dist/）
  if (argPath && deployPath.indexOf(deployDirPath) !== 0) {
    log.error(`非法路径 ${chalk.bgRed.black(argPath)} : 只允许指定发布目录${chalk.bgYellow.black(GC.deployDir)}'下的路径，请修正路径参数`, {exit: true})
  }

  // 检测发布目录/文件是否存在
  try {
    fs.accessSync(deployPath, fs.F_OK);
  } catch (e) {
    log.error(e, {exit: true})
  }

  // 检测发布目录（默认dist/）里是否已经编译成生产环境代码，如果不是则提醒、退出
  const isDistProd = yield checkDistProd(deployPath)
  if (!isDistProd) {
    log.error(`请先进行${chalk.magenta('生产环境')}编译打包，再进行发布！`)
    log.error('自动化发布中止...', {exit: true})
  }
  else {log.success('发布文件校验通过')}

  deployCDN(deployPath, deployDirPath, program)
  /*
  // 需要是大写的P
  if (program.P) {
    // 发布到CDN, 异步
    deployCDN(deployPath, deployDirPath, program)
  } else {
    cli.scp('dist/app.46cd5.css', 'wil:y@192.168.30.103:/home/wil/fecdn/repo/', function(err) {
      console.dir(err)

    })
  }
  */

  // 打tag
  if (program.tag) {
    log.info(`git Tag ${chalk.cyan('[' + tagName + ']')} 推送中... \n`)
    pushTag(tagName)
  }
  return 'CDN发布开始...'
}

co(gen).then((val) => {
  val && log.info(val)
}, (err) => {
  console.error(err.stack);
})
